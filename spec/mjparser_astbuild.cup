package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code
{:
    Boolean error_detected;

	Logger log = Logger.getLogger(getClass());

    public void report_fatal_error(String message, Object info) throws java.lang.Exception
    {
        done_parsing();
        report_error(message, info);
    }

    public void syntax_error(Symbol cur_token)
    {
        report_error("Syntax error", cur_token);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception
    {
        report_fatal_error("Fatal error, parsing terminated", cur_token);
    }

    public void report_error(String message, Object info)
    {
    	StringBuilder msg = new StringBuilder(message);

    	error_detected = true;

    	if (info instanceof Symbol)
    	{
    	    msg.append (" on line ").append(((Symbol)info).left);
    	}

        log.error(msg.toString());
    }
:}

init with
{:
    error_detected = false;
:}

scan with
{:
	Symbol s = this.getScanner().next_token();

	if (s != null && s.value != null)
	{
	    log.info(s.toString() + " " + s.value.toString());
	}

	return s;
:}

/* TERMINALS */
terminal PROGRAM, LEFT_BRACE, RIGHT_BRACE;
terminal CONST, SEMICOLON, COMMA, ASSIGN;
terminal String IDENTIFIER;
terminal Integer INT;
terminal Boolean BOOL;
terminal Character CHAR;
terminal LEFT_PARENTHESIS, RIGHT_PARENTHESIS, VOID;
terminal BREAK, CONTINUE, COLON;
terminal PERIOD, LEFT_SQUARE, RIGHT_SQUARE;
terminal INCREMENT, DECREMENT;
terminal IF, ELSE, DO, WHILE;
terminal RETURN, READ, PRINT;
terminal OR, AND, QUESTION_MARK, MINUS;
terminal NEW, ENUM, PLUS;
terminal MUL, DIV, MOD;
terminal EQUAL, NOT_EQUAL;
terminal GREATER, LESS;
terminal GREATER_OR_EQUAL;
terminal LESS_OR_EQUAL;

/* NONTERMINALS */
nonterminal Program Program;
nonterminal ProgramName ProgramName;
nonterminal DeclarationList DeclarationList;
nonterminal Declaration Declaration;
nonterminal MethodDeclarationList MethodDeclarationList;
nonterminal ConstDecl ConstDecl;
nonterminal VarDecl VarDecl;
nonterminal ConstDeclList ConstDeclList;
nonterminal ConstDeclVariable ConstDeclVariable;
nonterminal Type Type;
nonterminal ConstDeclName ConstDeclName;
nonterminal ConstDeclValue ConstDeclValue;
nonterminal CondTerm CondTerm;
nonterminal CondFact CondFact;
nonterminal Relop Relop;
nonterminal VarDeclList VarDeclList;
nonterminal DeclVariable DeclVariable;
nonterminal VarDeclName VarDeclName;
nonterminal VarDeclArrayOption VarDeclArrayOption;
nonterminal MethodDeclaration MethodDeclaration;
nonterminal MethodReturnType MethodReturnType;
nonterminal MethodName MethodName;
nonterminal MethodParameters MethodParameters;
nonterminal MethodVariables MethodVariables;
nonterminal MethodBody MethodBody;
nonterminal FormPars FormPars;
nonterminal Statement Statement;
nonterminal FormParList FormParList;
nonterminal FormPar FormPar;
nonterminal FormParName FormParName;
nonterminal FormParArrayOption FormParArrayOption;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal IfStatement IfStatement;
nonterminal DoWhileStatement DoWhileStatement;
nonterminal ReturnStatement ReturnStatement;
nonterminal PrintStatement PrintStatement;
nonterminal ReadStatement ReadStatement;
nonterminal Designator Designator;
nonterminal DesignatorAddition DesignatorAddition;
nonterminal DesignatorName DesignatorName;
nonterminal OptionalDesignatorList OptionalDesignatorList;
nonterminal OptionalDesignator OptionalDesignator;
nonterminal OptionalDesignatorName OptionalDesignatorName;
nonterminal DesignatorActPars DesignatorActPars;
nonterminal Assignop Assignop;
nonterminal Expr Expr;
nonterminal ActPars ActPars;
nonterminal OptionalStatement OptionalStatement;
nonterminal ElseStatement ElseStatement;
nonterminal Condition Condition;
nonterminal OptionalTermList OptionalTermList;
nonterminal ReturnExpr ReturnExpr;
nonterminal OptionalPrintNumber OptionalPrintNumber;
nonterminal PrintNumber PrintNumber;
nonterminal OptionalExpressions OptionalExpressions;
nonterminal OptionalExpr OptionalExpr;
nonterminal FiniteExpr FiniteExpr;
nonterminal Term Term;
nonterminal Addop Addop;
nonterminal Factor Factor;
nonterminal OptionalFactors OptionalFactors;
nonterminal OptionalFactor OptionalFactor;
nonterminal Mulop Mulop;
nonterminal AssignOpExprDesignatorAddition AssignOpExprDesignatorAddition;

/* PRECEDENCE */
precedence left ELSE;

/* PROGRAM - START */

Program ::=
		(Program) PROGRAM ProgramName:P1 DeclarationList:D2 LEFT_BRACE MethodDeclarationList:M3 RIGHT_BRACE {: RESULT=new Program(P1, D2, M3); RESULT.setLine(P1left); :}
		;
ProgramName ::=
		(ProgramName) IDENTIFIER:program_name {: RESULT=new ProgramName(program_name); RESULT.setLine(program_nameleft); :}
		;

/* PROGRAM - END */

/* DECLARATIONS - START */

DeclarationList ::=
        (YesDeclarationList) DeclarationList:D1 Declaration:D2 {: RESULT=new YesDeclarationList(D1, D2); RESULT.setLine(D1left); :}
        |
        (NoDeclarationList) {: RESULT=new NoDeclarationList(); :} /* epsilon */
        ;
Declaration ::=
        (ConstantDeclaration) ConstDecl:C1 {: RESULT=new ConstantDeclaration(C1); RESULT.setLine(C1left); :}
        |
        (VariableDeclaration) VarDecl:V1 {: RESULT=new VariableDeclaration(V1); RESULT.setLine(V1left); :}
        ;

/* CONST_DECL - START */

ConstDecl ::=
        (ConstDeclNoError) CONST Type:T1 ConstDeclList:C2 SEMICOLON {: RESULT=new ConstDeclNoError(T1, C2); RESULT.setLine(T1left); :}
        |
        (ConstDeclYesError) CONST error:error SEMICOLON
        {:
        	parser.report_error("Successful error recovery by parser on line " + errorleft + " -> Constant Declaration", null);
        :} {: RESULT=new ConstDeclYesError(); :}
        ;
ConstDeclList ::=
        (PluralConstDeclList) ConstDeclList:C1 COMMA ConstDeclVariable:C2 {: RESULT=new PluralConstDeclList(C1, C2); RESULT.setLine(C1left); :}
        |
        (SingleConstDeclList) ConstDeclVariable:C1 {: RESULT=new SingleConstDeclList(C1); RESULT.setLine(C1left); :}
        |
        (ErrorConstDeclList) error:error
        {:
        	parser.report_error("Successful error recovery by parser on line " + errorleft + " -> Constant Declaration", null);
        :} {: RESULT=new ErrorConstDeclList(); :}
        ;
ConstDeclVariable ::=
        (ConstDeclVariableNoError) ConstDeclName:C1 ASSIGN ConstDeclValue:C2 {: RESULT=new ConstDeclVariableNoError(C1, C2); RESULT.setLine(C1left); :}
        ;
ConstDeclName ::=
        (ConstDeclName) IDENTIFIER:name {: RESULT=new ConstDeclName(name); RESULT.setLine(nameleft); :}
        ;
ConstDeclValue ::=
        (ConstDeclValueInt) INT:value {: RESULT=new ConstDeclValueInt(value); RESULT.setLine(valueleft); :}
        |
        (ConstDeclValueChar) CHAR:value {: RESULT=new ConstDeclValueChar(value); RESULT.setLine(valueleft); :}
        |
        (ConstDeclValueBool) BOOL:value {: RESULT=new ConstDeclValueBool(value); RESULT.setLine(valueleft); :}
        ;

/* CONST_DECL - END */

/* VAR_DECL - START */

VarDecl ::=
        (VarDeclNoError) Type:T1 VarDeclList:V2 SEMICOLON {: RESULT=new VarDeclNoError(T1, V2); RESULT.setLine(T1left); :}
        |
        (VarDeclYesError) error:error SEMICOLON
       	{:
       		parser.report_error("Successful error recovery by parser on line " + errorleft + " -> Variable Declaration", null);
       	:} {: RESULT=new VarDeclYesError(); :}
        ;
VarDeclList ::=
        (PluralVarDeclList) VarDeclList:V1 COMMA DeclVariable:D2 {: RESULT=new PluralVarDeclList(V1, D2); RESULT.setLine(V1left); :}
        |
        (SingleVarDeclList) DeclVariable:D1 {: RESULT=new SingleVarDeclList(D1); RESULT.setLine(D1left); :}
        |
        (ErrorVarDeclList) error:error
       	{:
       		parser.report_error("Successful error recovery by parser on line " + errorleft + " -> Variable Declaration", null);
        :} {: RESULT=new ErrorVarDeclList(); :}
        ;
DeclVariable ::=
        (DeclVariable) VarDeclName:V1 VarDeclArrayOption:V2 {: RESULT=new DeclVariable(V1, V2); RESULT.setLine(V1left); :}
        ;
VarDeclName ::=
        (VarDeclName) IDENTIFIER:name {: RESULT=new VarDeclName(name); RESULT.setLine(nameleft); :}
        ;
VarDeclArrayOption ::=
        (YesVarDeclArrayOption) LEFT_SQUARE RIGHT_SQUARE {: RESULT=new YesVarDeclArrayOption(); :}
        |
        (NoVarDeclArrayOption) {: RESULT=new NoVarDeclArrayOption(); :} /* epsilon */
        ;

/* VAR_DECL - END */

/* METHOD_DECL - START */

MethodDeclarationList ::=
        (YesMethodDeclarationList) MethodDeclarationList:M1 MethodDeclaration:M2 {: RESULT=new YesMethodDeclarationList(M1, M2); RESULT.setLine(M1left); :}
        |
        (NoMethodDeclarationList) {: RESULT=new NoMethodDeclarationList(); :} /* epsilon */
        ;
MethodDeclaration ::=
        (MethodDeclaration) MethodReturnType:M1 MethodName:M2 LEFT_PARENTHESIS MethodParameters:M3 RIGHT_PARENTHESIS MethodVariables:M4 LEFT_BRACE MethodBody:M5 RIGHT_BRACE {: RESULT=new MethodDeclaration(M1, M2, M3, M4, M5); RESULT.setLine(M1left); :}
        ;
MethodReturnType ::=
        (TypeMethodReturnType) Type:T1 {: RESULT=new TypeMethodReturnType(T1); RESULT.setLine(T1left); :}
        |
        (VoidMethodReturnType) VOID {: RESULT=new VoidMethodReturnType(); :}
        ;
MethodName ::=
        (MethodName) IDENTIFIER:name {: RESULT=new MethodName(name); RESULT.setLine(nameleft); :}
        ;
MethodParameters ::=
        (YesMethodParameters) FormPars:F1 {: RESULT=new YesMethodParameters(F1); RESULT.setLine(F1left); :}
        |
        (NoMethodParameters) {: RESULT=new NoMethodParameters(); :} /* epsilon */
        ;
MethodVariables ::=
        (YesMethodVariables) MethodVariables:M1 VarDecl:V2 {: RESULT=new YesMethodVariables(M1, V2); RESULT.setLine(M1left); :}
        |
        (NoMethodVariables) {: RESULT=new NoMethodVariables(); :} /* epsilon */
        ;
MethodBody ::=
        (YesMethodBody) MethodBody:M1 Statement:S2 {: RESULT=new YesMethodBody(M1, S2); RESULT.setLine(M1left); :}
        |
        (NoMethodBody) {: RESULT=new NoMethodBody(); :} /* epsilon */
        ;

/* METHOD_DECL - END */

/* DECLARATIONS - END */

/* FORM_PARS - START */

FormPars ::=
        (FormPars) FormParList:F1 {: RESULT=new FormPars(F1); RESULT.setLine(F1left); :}
        ;
FormParList ::=
        (PluralFormParList) FormPar:F1 COMMA FormParList:F2 {: RESULT=new PluralFormParList(F1, F2); RESULT.setLine(F1left); :}
        |
        (SingleFormParList) FormPar:F1 {: RESULT=new SingleFormParList(F1); RESULT.setLine(F1left); :}
        ;
FormPar ::=
        (FormPar) Type:T1 FormParName:F2 FormParArrayOption:F3 {: RESULT=new FormPar(T1, F2, F3); RESULT.setLine(T1left); :}
        ;
FormParName ::=
        (FormParName) IDENTIFIER:name {: RESULT=new FormParName(name); RESULT.setLine(nameleft); :}
        ;
FormParArrayOption ::=
        (YesFormParArrayOption) LEFT_SQUARE RIGHT_SQUARE {: RESULT=new YesFormParArrayOption(); :}
        |
        (NoFormParArrayOption) {: RESULT=new NoFormParArrayOption(); :} /* epsilon */
        ;

/* FORM_PARS - END */

/* TYPE - START */

Type ::=
        (Type) IDENTIFIER:name {: RESULT=new Type(name); RESULT.setLine(nameleft); :}
        ;

/* TYPE - END */

/* STATEMENT - START */

Statement ::=
        (DesignatorStatementDecl) DesignatorStatement:D1 SEMICOLON {: RESULT=new DesignatorStatementDecl(D1); RESULT.setLine(D1left); :}
        |
        (IfStatementDecl) IfStatement:I1 {: RESULT=new IfStatementDecl(I1); RESULT.setLine(I1left); :}
        |
        (DoWhileStatementDecl) DoWhileStatement:D1 {: RESULT=new DoWhileStatementDecl(D1); RESULT.setLine(D1left); :}
        |
        (BreakStatement) BREAK SEMICOLON {: RESULT=new BreakStatement(); :}
        |
        (ContinueStatement) CONTINUE SEMICOLON {: RESULT=new ContinueStatement(); :}
        |
        (ReturnStatementDecl) ReturnStatement:R1 {: RESULT=new ReturnStatementDecl(R1); RESULT.setLine(R1left); :}
        |
        (ReadStatementDecl) ReadStatement:R1 {: RESULT=new ReadStatementDecl(R1); RESULT.setLine(R1left); :}
        |
        (PrintStatementDecl) PrintStatement:P1 {: RESULT=new PrintStatementDecl(P1); RESULT.setLine(P1left); :}
        |
        (MultipleStatements) LEFT_BRACE MethodBody:M1 RIGHT_BRACE {: RESULT=new MultipleStatements(M1); RESULT.setLine(M1left); :}
        ;

/* STATEMENT - END */

/* DESIGNATOR_STATEMENT - START */

DesignatorStatement ::=
        (DesignatorStatement) Designator:D1 DesignatorAddition:D2 {: RESULT=new DesignatorStatement(D1, D2); RESULT.setLine(D1left); :}
        ;
Designator ::=
        (Designator) DesignatorName:D1 OptionalDesignatorList:O2 {: RESULT=new Designator(D1, O2); RESULT.setLine(D1left); :}
        ;
DesignatorName ::=
        (DesignatorName) IDENTIFIER:name {: RESULT=new DesignatorName(name); RESULT.setLine(nameleft); :}
        ;
OptionalDesignatorList ::=
        (YesOptionalDesignatorList) OptionalDesignatorList:O1 OptionalDesignator:O2 {: RESULT=new YesOptionalDesignatorList(O1, O2); RESULT.setLine(O1left); :}
        |
        (NoOptionalDesignatorList) {: RESULT=new NoOptionalDesignatorList(); :} /* epsilon */
        ;
OptionalDesignator ::=
        (PeriodOptionalDesignator) PERIOD OptionalDesignatorName:O1 {: RESULT=new PeriodOptionalDesignator(O1); RESULT.setLine(O1left); :}
        |
        (ExprOptionalDesignator) LEFT_SQUARE Expr:E1 RIGHT_SQUARE {: RESULT=new ExprOptionalDesignator(E1); RESULT.setLine(E1left); :}
        ;
OptionalDesignatorName ::=
        (OptionalDesignatorName) IDENTIFIER:name {: RESULT=new OptionalDesignatorName(name); RESULT.setLine(nameleft); :}
        ;
DesignatorAddition ::=
		(PossibleErrorDesignatorAddition) AssignOpExprDesignatorAddition:A1 {: RESULT=new PossibleErrorDesignatorAddition(A1); RESULT.setLine(A1left); :}
		|
		(ActParsDesignatorAddition) LEFT_PARENTHESIS DesignatorActPars:D1 RIGHT_PARENTHESIS {: RESULT=new ActParsDesignatorAddition(D1); RESULT.setLine(D1left); :}
		|
		(IncrementDesignatorAddition) INCREMENT {: RESULT=new IncrementDesignatorAddition(); :}
		|
		(DecrementDesignatorAddition) DECREMENT {: RESULT=new DecrementDesignatorAddition(); :}
		;
AssignOpExprDesignatorAddition ::=
		(AssignOpExprDesignatorAdditionNoError) Assignop:A1 Expr:E2 {: RESULT=new AssignOpExprDesignatorAdditionNoError(A1, E2); RESULT.setLine(A1left); :}
		|
		(AssignOpExprDesignatorAdditionYesError) error:error
		{:
			parser.report_error("Successful error recovery by parser on line " + errorleft + " -> Designator Assignment", null);
        :} {: RESULT=new AssignOpExprDesignatorAdditionYesError(); :}
		;

DesignatorActPars ::=
		(YesDesignatorActPars) ActPars:A1 {: RESULT=new YesDesignatorActPars(A1); RESULT.setLine(A1left); :}
		|
		(DesignatorNoActPars) {: RESULT=new DesignatorNoActPars(); :} /* epsilon */
		;

/* DESIGNATOR_STATEMENT - END */

/* IF_STATEMENT - START */

IfStatement ::=
		(IfStatement) IF LEFT_PARENTHESIS Condition:C1 RIGHT_PARENTHESIS Statement:S2 OptionalStatement:O3 {: RESULT=new IfStatement(C1, S2, O3); RESULT.setLine(C1left); :}
		;
OptionalStatement ::=
		(YesOptionalStatement) ElseStatement:E1 Statement:S2 {: RESULT=new YesOptionalStatement(E1, S2); RESULT.setLine(E1left); :}
		|
		(NoOptionalStatement) {: RESULT=new NoOptionalStatement(); :} /* epsilon */
		;
ElseStatement ::=
		(ElseStatement) ELSE {: RESULT=new ElseStatement(); :}
		;

/* IF_STATEMENT - END */

/* DO_WHILE - START */

DoWhileStatement ::=
		(DoWhileStatement) DO Statement:S1 WHILE LEFT_PARENTHESIS Condition:C2 RIGHT_PARENTHESIS SEMICOLON {: RESULT=new DoWhileStatement(S1, C2); RESULT.setLine(S1left); :}
		;

/* DO_WHILE - END */

/* RETURN_STATEMENT - START */

ReturnStatement ::=
		(ReturnStatement) RETURN ReturnExpr:R1 SEMICOLON {: RESULT=new ReturnStatement(R1); RESULT.setLine(R1left); :}
		;
ReturnExpr ::=
		(YesReturnExpr) Expr:E1 {: RESULT=new YesReturnExpr(E1); RESULT.setLine(E1left); :}
		|
		(NoReturnExpr) {: RESULT=new NoReturnExpr(); :} /* epsilon */
		;
/* RETURN_STATEMENT - END */

/* READ_STATEMENT - START */

ReadStatement ::=
		(ReadStatement) READ LEFT_PARENTHESIS Designator:D1 RIGHT_PARENTHESIS SEMICOLON {: RESULT=new ReadStatement(D1); RESULT.setLine(D1left); :}
		;

/* READ_STATEMENT - END */

/* PRINT_STATEMENT - START */

PrintStatement ::=
		(PrintStatement) PRINT LEFT_PARENTHESIS Expr:E1 OptionalPrintNumber:O2 RIGHT_PARENTHESIS SEMICOLON {: RESULT=new PrintStatement(E1, O2); RESULT.setLine(E1left); :}
		;
OptionalPrintNumber ::=
		(OptionalYesPrintNumber) PrintNumber:P1 {: RESULT=new OptionalYesPrintNumber(P1); RESULT.setLine(P1left); :}
		|
		(OptionalNoPrintNumber) {: RESULT=new OptionalNoPrintNumber(); :} /* epsilon */
		;
PrintNumber ::=
		(PrintInt) COMMA INT:number {: RESULT=new PrintInt(number); RESULT.setLine(numberleft); :}
		;

/* PRINT_STATEMENT - END */

/* ACT_PARS - START */

ActPars ::=
		(ActPars) Expr:E1 OptionalExpressions:O2 {: RESULT=new ActPars(E1, O2); RESULT.setLine(E1left); :}
		;
OptionalExpressions ::=
		(YesOptionalExpressions) OptionalExpressions:O1 OptionalExpr:O2 {: RESULT=new YesOptionalExpressions(O1, O2); RESULT.setLine(O1left); :}
		|
		(NoOptionalExpressions) {: RESULT=new NoOptionalExpressions(); :} /* epsilon */
		;
OptionalExpr ::=
		(OptionalExpr) COMMA Expr:E1 {: RESULT=new OptionalExpr(E1); RESULT.setLine(E1left); :}
		;

/* ACT_PARS - END */

/* CONDITIONS - START */

Condition ::=
		(PluralCondition) Condition:C1 OR CondTerm:C2 {: RESULT=new PluralCondition(C1, C2); RESULT.setLine(C1left); :}
		|
		(SingleCondition) CondTerm:C1 {: RESULT=new SingleCondition(C1); RESULT.setLine(C1left); :}
		;
CondTerm ::=
		(PluralCondTerm) CondTerm:C1 AND CondFact:C2 {: RESULT=new PluralCondTerm(C1, C2); RESULT.setLine(C1left); :}
		|
		(SingleCondTerm) CondFact:C1 {: RESULT=new SingleCondTerm(C1); RESULT.setLine(C1left); :}
		;
CondFact ::=
		(SingleCondFact) FiniteExpr:F1 {: RESULT=new SingleCondFact(F1); RESULT.setLine(F1left); :}
		|
		(PluralCondFact) CondFact:C1 Relop:R2 FiniteExpr:F3 {: RESULT=new PluralCondFact(C1, R2, F3); RESULT.setLine(C1left); :}
		;

/* CONDITIONS - END */

/* EXPR - START */

Expr ::=
        (YesTernaryExpr) Condition:C1 QUESTION_MARK Expr:E2 COLON Expr:E3 {: RESULT=new YesTernaryExpr(C1, E2, E3); RESULT.setLine(C1left); :}
        |
        (NoTernaryExpr) Condition:C1 {: RESULT=new NoTernaryExpr(C1); RESULT.setLine(C1left); :}
		;
FiniteExpr ::=
		(TermFiniteExpr) Term:T1 OptionalTermList:O2 {: RESULT=new TermFiniteExpr(T1, O2); RESULT.setLine(T1left); :}
		|
		(MinusTermFiniteExpr) MINUS Term:T1 OptionalTermList:O2 {: RESULT=new MinusTermFiniteExpr(T1, O2); RESULT.setLine(T1left); :}
		;
OptionalTermList ::=
		(YesOptionalTermList) OptionalTermList:O1 Addop:A2 Term:T3 {: RESULT=new YesOptionalTermList(O1, A2, T3); RESULT.setLine(O1left); :}
		|
		(NoOptionalTermList) {: RESULT=new NoOptionalTermList(); :} /* epsilon */
		;

/* EXPR - END */

/* TERM - START */

Term ::=
		(Term) Factor:F1 OptionalFactors:O2 {: RESULT=new Term(F1, O2); RESULT.setLine(F1left); :}
		;
OptionalFactors ::=
		(YesOptionalFactors) OptionalFactors:O1 OptionalFactor:O2 {: RESULT=new YesOptionalFactors(O1, O2); RESULT.setLine(O1left); :}
		|
		(NoOptionalFactors) {: RESULT=new NoOptionalFactors(); :} /* epsilon */
		;
OptionalFactor ::=
		(OptionalFactor) Mulop:M1 Factor:F2 {: RESULT=new OptionalFactor(M1, F2); RESULT.setLine(M1left); :}
		;

/* TERM - END */

/* FACTOR - START */

Factor ::=
		(DesignatorFactor) Designator:D1 {: RESULT=new DesignatorFactor(D1); RESULT.setLine(D1left); :}
		|
		(FunctionCallFactor) Designator:D1 LEFT_PARENTHESIS DesignatorActPars:D2 RIGHT_PARENTHESIS {: RESULT=new FunctionCallFactor(D1, D2); RESULT.setLine(D1left); :}
		|
		(IntFactor) INT:value {: RESULT=new IntFactor(value); RESULT.setLine(valueleft); :}
		|
		(CharFactor) CHAR:value {: RESULT=new CharFactor(value); RESULT.setLine(valueleft); :}
		|
		(BoolFactor) BOOL:value {: RESULT=new BoolFactor(value); RESULT.setLine(valueleft); :}
		|
		(NewFactor) NEW Type:T1 {: RESULT=new NewFactor(T1); RESULT.setLine(T1left); :}
		|
		(NewArrayFactor) NEW Type:T1 LEFT_SQUARE Expr:E2 RIGHT_SQUARE {: RESULT=new NewArrayFactor(T1, E2); RESULT.setLine(T1left); :}
		|
		(ExprFactor) LEFT_PARENTHESIS Expr:E1 RIGHT_PARENTHESIS {: RESULT=new ExprFactor(E1); RESULT.setLine(E1left); :}
		;

/* FACTOR - END */

/* OP - START */

Assignop ::=
		(Assignop) ASSIGN {: RESULT=new Assignop(); :}
		;
Addop ::=
		(AddopPlus) PLUS {: RESULT=new AddopPlus(); :}
		|
		(AddopMinus) MINUS {: RESULT=new AddopMinus(); :}
		;
Mulop ::=
		(MulopMul) MUL {: RESULT=new MulopMul(); :}
		|
		(MulopDiv) DIV {: RESULT=new MulopDiv(); :}
		|
		(MulopMod) MOD {: RESULT=new MulopMod(); :}
		;
Relop ::=
		(RelopEqual) EQUAL {: RESULT=new RelopEqual(); :}
		|
		(RelopNotEqual) NOT_EQUAL {: RESULT=new RelopNotEqual(); :}
		|
		(RelopGreater) GREATER {: RESULT=new RelopGreater(); :}
		|
		(RelopGreaterOrEqual) GREATER_OR_EQUAL {: RESULT=new RelopGreaterOrEqual(); :}
		|
		(RelopLess) LESS {: RESULT=new RelopLess(); :}
		|
		(RelopLessOrEqual) LESS_OR_EQUAL {: RESULT=new RelopLessOrEqual(); :}
		;

/* OP - END */