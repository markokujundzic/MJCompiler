package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code
{:
	Boolean errorDetected;

	Logger log = Logger.getLogger(getClass());

	public void report_fatal_error(String message, Object info) throws java.lang.Exception
	{
		done_parsing();
		report_error(message, info);
	}

	public void syntax_error(Symbol cur_token)
	{
		report_error("Syntax error", cur_token);
	}

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception
    {
        report_fatal_error("Fatal error, parsing terminated", cur_token);
    }

    public void report_error(String message, Object info)
    {
    	StringBuilder msg = new StringBuilder(message);

    	errorDetected = true;

    	if (info instanceof Symbol)
    	{
    	    msg.append (" on line ").append(((Symbol)info).left);
    	}

        log.error(msg.toString());
    }
:}

init with
{:
    errorDetected = false;
:}

scan with
{:
	Symbol s = this.getScanner().next_token();

	if (s != null && s.value != null)
	{
	    log.info(s.toString() + " " + s.value.toString());
	}

	return s;
:}

/* TERMINALS */
terminal PROGRAM, LEFT_BRACE, RIGHT_BRACE;
terminal CONST, SEMICOLON, COMMA, ASSIGN;
terminal String IDENTIFIER;
terminal Integer INT;
terminal Boolean BOOL;
terminal Character CHAR;
terminal LEFT_PARENTHESIS, RIGHT_PARENTHESIS, VOID;
terminal BREAK, CONTINUE, COLON;
terminal PERIOD, LEFT_SQUARE, RIGHT_SQUARE;
terminal INCREMENT, DECREMENT;
terminal IF, ELSE, DO, WHILE;
terminal RETURN, READ, PRINT;
terminal OR, AND, QUESTION_MARK, MINUS;
terminal NEW, PLUS;
terminal MUL, DIV, MOD;
terminal EQUAL, NOT_EQUAL;
terminal GREATER, LESS;
terminal GREATER_OR_EQUAL;
terminal LESS_OR_EQUAL;

/* NONTERMINALS */
nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgramName, Program, MethodName, DesignatorName;

nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, MethodReturnType, ConstDeclValue;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Expr, FiniteExpr, Term, Factor, CondFact, FiniteTerm;
nonterminal rs.etf.pp1.symboltable.concepts.Struct OptionalTermList, PossibleErrorDesignatorAddition, DesignatorAddition;

nonterminal DeclarationList, Declaration, MethodDeclarationList;
nonterminal ConstDecl, VarDecl, ConstDeclList, ConstDeclVariable;
nonterminal ConstDeclName, CondTerm, Relop, PossibleErrorCondition;
nonterminal VarDeclList, DeclVariable, VarDeclName, VarDeclArrayOption;
nonterminal MethodDeclaration, MethodParameters, MethodVariables, MethodBody;
nonterminal FormPars, Statement, FormParList, FormPar, FormParName, FormParArrayOption;
nonterminal DesignatorStatement, IfStatement, DoWhileStatement, ReturnStatement;
nonterminal PrintStatement, ReadStatement, Designator, OptionalDesignatorList;
nonterminal OptionalDesignator, OptionalDesignatorName, DesignatorActPars, Assignop;
nonterminal ActPars, OptionalStatement, ElseStatement, Condition;
nonterminal ReturnExpr, OptionalPrintNumber, PrintNumber, OptionalExpressions, OptionalExpr;
nonterminal Addop, OptionalFactors, OptionalFactor, Mulop, TernaryColon;

/* PRECEDENCE */
precedence left ELSE;

/* PROGRAM - START */

Program ::=
		(Program) PROGRAM ProgramName DeclarationList LEFT_BRACE MethodDeclarationList RIGHT_BRACE
		;
ProgramName ::=
		(ProgramName) IDENTIFIER:programName
		;

/* PROGRAM - END */

/* DECLARATIONS - START */

DeclarationList ::=
		(YesDeclarationList) DeclarationList Declaration
		|
		(NoDeclarationList) /* epsilon */
		;
Declaration ::=
		(ConstantDeclaration) ConstDecl
		|
		(VariableDeclaration) VarDecl
		;

/* CONST_DECL - START */

ConstDecl ::=
		(ConstDeclNoError) CONST Type ConstDeclList SEMICOLON
		|
		(ConstDeclYesError) CONST error:error SEMICOLON
		{:
			parser.report_error("Successful error recovery by parser on line " + errorleft + " -> Constant Declaration", null);
		:}
		;
ConstDeclList ::=
		(PluralConstDeclList) ConstDeclList COMMA ConstDeclVariable
		|
		(SingleConstDeclList) ConstDeclVariable
		|
		(ErrorConstDeclList) error:error
		{:
			parser.report_error("Successful error recovery by parser on line " + errorleft + " -> Constant Declaration", null);
		:}
		;
ConstDeclVariable ::=
		(ConstDeclVariable) ConstDeclName ASSIGN ConstDeclValue
		;
ConstDeclName ::=
		(ConstDeclName) IDENTIFIER:name
		;
ConstDeclValue ::=
		(ConstDeclValueInt) INT:value
		|
		(ConstDeclValueChar) CHAR:value
		|
		(ConstDeclValueBool) BOOL:value
		;

/* CONST_DECL - END */

/* VAR_DECL - START */

VarDecl ::=
		(VarDeclNoError) Type VarDeclList SEMICOLON
		|
		(VarDeclYesError) error:error SEMICOLON
		{:
			parser.report_error("Successful error recovery by parser on line " + errorleft + " -> Variable Declaration", null);
		:}
		;
VarDeclList ::=
		(PluralVarDeclList) VarDeclList COMMA DeclVariable
		|
		(SingleVarDeclList) DeclVariable
		|
		(ErrorVarDeclList) error:error
		{:
			parser.report_error("Successful error recovery by parser on line " + errorleft + " -> Variable Declaration", null);
		:}
		;
DeclVariable ::=
		(DeclVariable) VarDeclName VarDeclArrayOption
		;
VarDeclName ::=
		(VarDeclName) IDENTIFIER:name
		;
VarDeclArrayOption ::=
		(YesVarDeclArrayOption) LEFT_SQUARE RIGHT_SQUARE
		|
		(NoVarDeclArrayOption) /* epsilon */
		;

/* VAR_DECL - END */

/* METHOD_DECL - START */

MethodDeclarationList ::=
		(YesMethodDeclarationList) MethodDeclarationList MethodDeclaration
		|
		(NoMethodDeclarationList) /* epsilon */
		;
MethodDeclaration ::=
		(MethodDeclaration) MethodReturnType MethodName LEFT_PARENTHESIS MethodParameters RIGHT_PARENTHESIS MethodVariables LEFT_BRACE MethodBody RIGHT_BRACE
		;
MethodReturnType ::=
		(TypeMethodReturnType) Type
		|
		(VoidMethodReturnType) VOID
		;
MethodName ::=
		(MethodName) IDENTIFIER:name
		;
MethodParameters ::=
		(YesMethodParameters) FormPars
		|
		(NoMethodParameters) /* epsilon */
		;
MethodVariables ::=
		(YesMethodVariables) MethodVariables VarDecl
		|
		(NoMethodVariables) /* epsilon */
		;
MethodBody ::=
		(YesMethodBody) MethodBody Statement
		|
		(NoMethodBody) /* epsilon */
		;

/* METHOD_DECL - END */

/* DECLARATIONS - END */

/* FORM_PARS - START */

FormPars ::=
		(FormPars) FormParList
		;
FormParList ::=
		(PluralFormParList) FormPar COMMA FormParList
		|
		(SingleFormParList) FormPar
		;
FormPar ::=
		(FormParNoError) Type FormParName FormParArrayOption
		|
		(FormParYesError) error:error
		{:
			parser.report_error("Successful error recovery by parser on line " + errorleft + " -> Formal function parameter", null);
		:}
		;
FormParName ::=
		(FormParName) IDENTIFIER:name
		;
FormParArrayOption ::=
		(YesFormParArrayOption) LEFT_SQUARE RIGHT_SQUARE
		|
		(NoFormParArrayOption) /* epsilon */
		;

/* FORM_PARS - END */

/* TYPE - START */

Type ::=
		(Type) IDENTIFIER:name
		;

/* TYPE - END */

/* STATEMENT - START */

Statement ::=
		(DesignatorStatementDecl) DesignatorStatement SEMICOLON
		|
		(ReadStatementDecl) ReadStatement
		|
		(PrintStatementDecl) PrintStatement
		|
		(IfStatementDecl) IfStatement
		|
		(DoWhileStatementDecl) DoWhileStatement
		|
		(BreakStatement) BREAK SEMICOLON
		|
		(ContinueStatement) CONTINUE SEMICOLON
		|
		(ReturnStatementDecl) ReturnStatement
		|
		(MultipleStatements) LEFT_BRACE MethodBody RIGHT_BRACE
		;

/* STATEMENT - END */

/* DESIGNATOR_STATEMENT - START */

DesignatorStatement ::=
		(DesignatorStatement) Designator DesignatorAddition
		;
Designator ::=
		(Designator) DesignatorName OptionalDesignator
		;
DesignatorName ::=
		(DesignatorName) IDENTIFIER:name
		;
OptionalDesignator ::=
		(YesOptionalDesignator) LEFT_SQUARE Expr RIGHT_SQUARE
		|
		(NoOptionalDesignator) /* epsilon */
		;
OptionalDesignatorName ::=
		(OptionalDesignatorName) IDENTIFIER:name
		;
DesignatorAddition ::=
		(PossibleErrorAssignOpDesignatorAddition) PossibleErrorDesignatorAddition
		|
		(ActParsDesignatorAddition) LEFT_PARENTHESIS DesignatorActPars RIGHT_PARENTHESIS
		|
		(IncrementDesignatorAddition) INCREMENT
		|
		(DecrementDesignatorAddition) DECREMENT
		;
PossibleErrorDesignatorAddition ::=
		(AssignOpExprDesignatorAdditionNoError) Assignop Expr
		|
		(AssignOpExprDesignatorAdditionYesError) error:error
		{:
			parser.report_error("Successful error recovery by parser on line " + errorleft + " -> Designator Assignment", null);
		:}
		;
DesignatorActPars ::=
		(YesDesignatorActPars) ActPars
		|
		(DesignatorNoActPars) /* epsilon */
		;

/* DESIGNATOR_STATEMENT - END */

/* IF_STATEMENT - START */

IfStatement ::=
		(IfStatement) IF LEFT_PARENTHESIS PossibleErrorCondition RIGHT_PARENTHESIS Statement OptionalStatement
		;
PossibleErrorCondition ::=
		(IfConditionNoError) Condition
		|
		(IfConditionYesError) error:error
		{:
			parser.report_error("Successful error recovery by parser on line " + errorleft + " -> If Statement Condition", null);
		:}
		;
OptionalStatement ::=
		(YesOptionalStatement) ElseStatement Statement
		|
		(NoOptionalStatement) /* epsilon */
		;
ElseStatement ::=
		(ElseStatement) ELSE
		;

/* IF_STATEMENT - END */

/* DO_WHILE - START */

DoWhileStatement ::=
		(DoWhileStatement) DO Statement WHILE LEFT_PARENTHESIS Condition RIGHT_PARENTHESIS SEMICOLON
		;

/* DO_WHILE - END */

/* RETURN_STATEMENT - START */

ReturnStatement ::=
		(ReturnStatement) RETURN ReturnExpr SEMICOLON
		;
ReturnExpr ::=
		(YesReturnExpr) Expr
		|
		(NoReturnExpr) /* epsilon */
		;
/* RETURN_STATEMENT - END */

/* READ_STATEMENT - START */

ReadStatement ::=
		(ReadStatement) READ LEFT_PARENTHESIS Designator RIGHT_PARENTHESIS SEMICOLON
		;

/* READ_STATEMENT - END */

/* PRINT_STATEMENT - START */

PrintStatement ::=
		(PrintStatement) PRINT LEFT_PARENTHESIS Expr OptionalPrintNumber RIGHT_PARENTHESIS SEMICOLON
		;
OptionalPrintNumber ::=
		(OptionalYesPrintNumber) PrintNumber
		|
		(OptionalNoPrintNumber) /* epsilon */
		;
PrintNumber ::=
		(PrintInt) COMMA INT:number
		;

/* PRINT_STATEMENT - END */

/* ACT_PARS - START */

ActPars ::=
		(ActPars) Expr OptionalExpressions
		;
OptionalExpressions ::=
		(YesOptionalExpressions) OptionalExpressions OptionalExpr
		|
		(NoOptionalExpressions) /* epsilon */
		;
OptionalExpr ::=
		(OptionalExpr) COMMA Expr
		;

/* ACT_PARS - END */

/* CONDITIONS - START */

Condition ::=
		(PluralCondition) Condition OR CondTerm
		|
		(SingleCondition) CondTerm
		;
CondTerm ::=
		(PluralCondTerm) CondTerm AND CondFact
		|
		(SingleCondTerm) CondFact
		;
CondFact ::=
		(SingleCondFact) FiniteExpr
		|
		(PluralCondFact) FiniteExpr Relop FiniteExpr
		;

/* CONDITIONS - END */

/* EXPR - START */

Expr ::=
		(YesTernaryExpr) CondFact QUESTION_MARK Expr TernaryColon Expr
		|
		(NoTernaryExpr) CondFact
		;
TernaryColon ::=
		(TernaryColon) COLON
		;
FiniteExpr ::=
		(TermFiniteExpr) FiniteTerm OptionalTermList
		|
		(MinusTermFiniteExpr) MINUS FiniteTerm OptionalTermList
		;
OptionalTermList ::=
		(YesOptionalTermList) OptionalTermList Addop FiniteTerm
		|
		(NoOptionalTermList) /* epsilon */
		;

/* EXPR - END */

/* TERM - START */

FiniteTerm ::=
		(FiniteTerm) Term
		;
Term ::=
		(FactorTerm) Factor
		|
		(MulopTerm) Term Mulop Factor
		;

/* TERM - END */

/* FACTOR - START */

Factor ::=
		(DesignatorFactor) Designator
		|
		(FunctionCallFactor) Designator LEFT_PARENTHESIS DesignatorActPars RIGHT_PARENTHESIS
		|
		(IntFactor) INT:value
		|
		(CharFactor) CHAR:value
		|
		(BoolFactor) BOOL:value
		|
		(NewArrayFactor) NEW Type LEFT_SQUARE Expr RIGHT_SQUARE
		|
		(ExprFactor) LEFT_PARENTHESIS Expr RIGHT_PARENTHESIS
		;

/* FACTOR - END */

/* OP - START */

Assignop ::=
		(Assignop) ASSIGN
		;
Addop ::=
		(AddopPlus) PLUS
		|
		(AddopMinus) MINUS
		;
Mulop ::=
		(MulopMul) MUL
		|
		(MulopDiv) DIV
		|
		(MulopMod) MOD
		;
Relop ::=
		(RelopEqual) EQUAL
		|
		(RelopNotEqual) NOT_EQUAL
		|
		(RelopGreater) GREATER
		|
		(RelopGreaterOrEqual) GREATER_OR_EQUAL
		|
		(RelopLess) LESS
		|
		(RelopLessOrEqual) LESS_OR_EQUAL
		;

/* OP - END */