INFO  14:26:53,955 - Compiling source file: C:\Users\Asus\Desktop\FAKS\PP1\MJCompiler\test\semanticErrors.mj
INFO  14:26:54,049 - #2 program
INFO  14:26:54,049 - #9 semanticErrors
INFO  14:26:54,049 - #5 const
INFO  14:26:54,049 - #9 int
INFO  14:26:54,049 - #9 constInt
INFO  14:26:54,049 - #8 =
INFO  14:26:54,049 - #10 1
INFO  14:26:54,049 - #6 ;
INFO  14:26:54,049 - #5 const
INFO  14:26:54,049 - #9 char
INFO  14:26:54,049 - #9 constChar
INFO  14:26:54,049 - #8 =
INFO  14:26:54,049 - #12 x
INFO  14:26:54,049 - #6 ;
INFO  14:26:54,049 - #5 const
INFO  14:26:54,049 - #9 bool
INFO  14:26:54,049 - #9 constBool
INFO  14:26:54,049 - #8 =
INFO  14:26:54,049 - #11 true
INFO  14:26:54,049 - #6 ;
INFO  14:26:54,049 - #5 const
INFO  14:26:54,049 - #9 int
INFO  14:26:54,049 - #9 constErrorInt
INFO  14:26:54,049 - #8 =
INFO  14:26:54,049 - #11 true
INFO  14:26:54,049 - #6 ;
INFO  14:26:54,049 - #5 const
INFO  14:26:54,049 - #9 char
INFO  14:26:54,049 - #9 constErrorChar
INFO  14:26:54,049 - #8 =
INFO  14:26:54,049 - #10 5
INFO  14:26:54,049 - #6 ;
INFO  14:26:54,065 - #5 const
INFO  14:26:54,065 - #9 bool
INFO  14:26:54,065 - #9 constErrorBool
INFO  14:26:54,065 - #8 =
INFO  14:26:54,065 - #12 h
INFO  14:26:54,065 - #6 ;
INFO  14:26:54,065 - #5 const
INFO  14:26:54,065 - #9 int
INFO  14:26:54,065 - #9 constInt
INFO  14:26:54,065 - #8 =
INFO  14:26:54,065 - #10 3
INFO  14:26:54,065 - #6 ;
INFO  14:26:54,065 - #9 int
INFO  14:26:54,065 - #9 x
INFO  14:26:54,065 - #20 [
INFO  14:26:54,065 - #21 ]
INFO  14:26:54,065 - #7 ,
INFO  14:26:54,065 - #9 y
INFO  14:26:54,065 - #20 [
INFO  14:26:54,065 - #21 ]
INFO  14:26:54,065 - #6 ;
INFO  14:26:54,065 - #9 bool
INFO  14:26:54,065 - #9 b
INFO  14:26:54,065 - #6 ;
INFO  14:26:54,065 - #9 char
INFO  14:26:54,065 - #9 c
INFO  14:26:54,065 - #6 ;
INFO  14:26:54,065 - #9 string
INFO  14:26:54,065 - #9 s
INFO  14:26:54,065 - #6 ;
INFO  14:26:54,065 - #3 {
INFO  14:26:54,065 - #15 void
INFO  14:26:54,065 - #9 main
INFO  14:26:54,065 - #13 (
INFO  14:26:54,065 - #14 )
INFO  14:26:54,065 - #3 {
INFO  14:26:54,065 - #9 b
INFO  14:26:54,065 - #8 =
INFO  14:26:54,065 - #9 c
INFO  14:26:54,065 - #6 ;
INFO  14:26:54,065 - #9 c
INFO  14:26:54,065 - #22 ++
INFO  14:26:54,065 - #6 ;
INFO  14:26:54,065 - #9 x
INFO  14:26:54,080 - #20 [
INFO  14:26:54,080 - #10 0
INFO  14:26:54,080 - #21 ]
INFO  14:26:54,080 - #22 ++
INFO  14:26:54,080 - #6 ;
INFO  14:26:54,080 - #29 read
INFO  14:26:54,080 - #13 (
INFO  14:26:54,080 - #9 x
INFO  14:26:54,080 - #14 )
INFO  14:26:54,080 - #6 ;
INFO  14:26:54,080 - #4 }
INFO  14:26:54,080 - #4 }
INFO  14:26:54,080 - Program(
  ProgramName(
   semanticErrors
  ) [ProgramName]
  YesDeclarationList(
    YesDeclarationList(
      YesDeclarationList(
        YesDeclarationList(
          YesDeclarationList(
            YesDeclarationList(
              YesDeclarationList(
                YesDeclarationList(
                  YesDeclarationList(
                    YesDeclarationList(
                      YesDeclarationList(
                        NoDeclarationList(
                        ) [NoDeclarationList]
                        ConstantDeclaration(
                          ConstDeclNoError(
                            Type(
                             int
                            ) [Type]
                            SingleConstDeclList(
                              ConstDeclVariable(
                                ConstDeclName(
                                 constInt
                                ) [ConstDeclName]
                                ConstDeclValueInt(
                                 1
                                ) [ConstDeclValueInt]
                              ) [ConstDeclVariable]
                            ) [SingleConstDeclList]
                          ) [ConstDeclNoError]
                        ) [ConstantDeclaration]
                      ) [YesDeclarationList]
                      ConstantDeclaration(
                        ConstDeclNoError(
                          Type(
                           char
                          ) [Type]
                          SingleConstDeclList(
                            ConstDeclVariable(
                              ConstDeclName(
                               constChar
                              ) [ConstDeclName]
                              ConstDeclValueChar(
                               x
                              ) [ConstDeclValueChar]
                            ) [ConstDeclVariable]
                          ) [SingleConstDeclList]
                        ) [ConstDeclNoError]
                      ) [ConstantDeclaration]
                    ) [YesDeclarationList]
                    ConstantDeclaration(
                      ConstDeclNoError(
                        Type(
                         bool
                        ) [Type]
                        SingleConstDeclList(
                          ConstDeclVariable(
                            ConstDeclName(
                             constBool
                            ) [ConstDeclName]
                            ConstDeclValueBool(
                             true
                            ) [ConstDeclValueBool]
                          ) [ConstDeclVariable]
                        ) [SingleConstDeclList]
                      ) [ConstDeclNoError]
                    ) [ConstantDeclaration]
                  ) [YesDeclarationList]
                  ConstantDeclaration(
                    ConstDeclNoError(
                      Type(
                       int
                      ) [Type]
                      SingleConstDeclList(
                        ConstDeclVariable(
                          ConstDeclName(
                           constErrorInt
                          ) [ConstDeclName]
                          ConstDeclValueBool(
                           true
                          ) [ConstDeclValueBool]
                        ) [ConstDeclVariable]
                      ) [SingleConstDeclList]
                    ) [ConstDeclNoError]
                  ) [ConstantDeclaration]
                ) [YesDeclarationList]
                ConstantDeclaration(
                  ConstDeclNoError(
                    Type(
                     char
                    ) [Type]
                    SingleConstDeclList(
                      ConstDeclVariable(
                        ConstDeclName(
                         constErrorChar
                        ) [ConstDeclName]
                        ConstDeclValueInt(
                         5
                        ) [ConstDeclValueInt]
                      ) [ConstDeclVariable]
                    ) [SingleConstDeclList]
                  ) [ConstDeclNoError]
                ) [ConstantDeclaration]
              ) [YesDeclarationList]
              ConstantDeclaration(
                ConstDeclNoError(
                  Type(
                   bool
                  ) [Type]
                  SingleConstDeclList(
                    ConstDeclVariable(
                      ConstDeclName(
                       constErrorBool
                      ) [ConstDeclName]
                      ConstDeclValueChar(
                       h
                      ) [ConstDeclValueChar]
                    ) [ConstDeclVariable]
                  ) [SingleConstDeclList]
                ) [ConstDeclNoError]
              ) [ConstantDeclaration]
            ) [YesDeclarationList]
            ConstantDeclaration(
              ConstDeclNoError(
                Type(
                 int
                ) [Type]
                SingleConstDeclList(
                  ConstDeclVariable(
                    ConstDeclName(
                     constInt
                    ) [ConstDeclName]
                    ConstDeclValueInt(
                     3
                    ) [ConstDeclValueInt]
                  ) [ConstDeclVariable]
                ) [SingleConstDeclList]
              ) [ConstDeclNoError]
            ) [ConstantDeclaration]
          ) [YesDeclarationList]
          VariableDeclaration(
            VarDeclNoError(
              Type(
               int
              ) [Type]
              PluralVarDeclList(
                SingleVarDeclList(
                  DeclVariable(
                    VarDeclName(
                     x
                    ) [VarDeclName]
                    YesVarDeclArrayOption(
                    ) [YesVarDeclArrayOption]
                  ) [DeclVariable]
                ) [SingleVarDeclList]
                DeclVariable(
                  VarDeclName(
                   y
                  ) [VarDeclName]
                  YesVarDeclArrayOption(
                  ) [YesVarDeclArrayOption]
                ) [DeclVariable]
              ) [PluralVarDeclList]
            ) [VarDeclNoError]
          ) [VariableDeclaration]
        ) [YesDeclarationList]
        VariableDeclaration(
          VarDeclNoError(
            Type(
             bool
            ) [Type]
            SingleVarDeclList(
              DeclVariable(
                VarDeclName(
                 b
                ) [VarDeclName]
                NoVarDeclArrayOption(
                ) [NoVarDeclArrayOption]
              ) [DeclVariable]
            ) [SingleVarDeclList]
          ) [VarDeclNoError]
        ) [VariableDeclaration]
      ) [YesDeclarationList]
      VariableDeclaration(
        VarDeclNoError(
          Type(
           char
          ) [Type]
          SingleVarDeclList(
            DeclVariable(
              VarDeclName(
               c
              ) [VarDeclName]
              NoVarDeclArrayOption(
              ) [NoVarDeclArrayOption]
            ) [DeclVariable]
          ) [SingleVarDeclList]
        ) [VarDeclNoError]
      ) [VariableDeclaration]
    ) [YesDeclarationList]
    VariableDeclaration(
      VarDeclNoError(
        Type(
         string
        ) [Type]
        SingleVarDeclList(
          DeclVariable(
            VarDeclName(
             s
            ) [VarDeclName]
            NoVarDeclArrayOption(
            ) [NoVarDeclArrayOption]
          ) [DeclVariable]
        ) [SingleVarDeclList]
      ) [VarDeclNoError]
    ) [VariableDeclaration]
  ) [YesDeclarationList]
  YesMethodDeclarationList(
    NoMethodDeclarationList(
    ) [NoMethodDeclarationList]
    MethodDeclaration(
      VoidMethodReturnType(
      ) [VoidMethodReturnType]
      MethodName(
       main
      ) [MethodName]
      NoMethodParameters(
      ) [NoMethodParameters]
      NoMethodVariables(
      ) [NoMethodVariables]
      YesMethodBody(
        YesMethodBody(
          YesMethodBody(
            YesMethodBody(
              NoMethodBody(
              ) [NoMethodBody]
              DesignatorStatementDecl(
                DesignatorStatement(
                  Designator(
                    DesignatorName(
                     b
                    ) [DesignatorName]
                    NoOptionalDesignator(
                    ) [NoOptionalDesignator]
                  ) [Designator]
                  PossibleErrorAssignOpDesignatorAddition(
                    AssignOpExprDesignatorAdditionNoError(
                      Assignop(
                      ) [Assignop]
                      NoTernaryExpr(
                        SingleCondFact(
                          TermFiniteExpr(
                            FactorTerm(
                              DesignatorFactor(
                                Designator(
                                  DesignatorName(
                                   c
                                  ) [DesignatorName]
                                  NoOptionalDesignator(
                                  ) [NoOptionalDesignator]
                                ) [Designator]
                              ) [DesignatorFactor]
                            ) [FactorTerm]
                            NoOptionalTermList(
                            ) [NoOptionalTermList]
                          ) [TermFiniteExpr]
                        ) [SingleCondFact]
                      ) [NoTernaryExpr]
                    ) [AssignOpExprDesignatorAdditionNoError]
                  ) [PossibleErrorAssignOpDesignatorAddition]
                ) [DesignatorStatement]
              ) [DesignatorStatementDecl]
            ) [YesMethodBody]
            DesignatorStatementDecl(
              DesignatorStatement(
                Designator(
                  DesignatorName(
                   c
                  ) [DesignatorName]
                  NoOptionalDesignator(
                  ) [NoOptionalDesignator]
                ) [Designator]
                IncrementDesignatorAddition(
                ) [IncrementDesignatorAddition]
              ) [DesignatorStatement]
            ) [DesignatorStatementDecl]
          ) [YesMethodBody]
          DesignatorStatementDecl(
            DesignatorStatement(
              Designator(
                DesignatorName(
                 x
                ) [DesignatorName]
                YesOptionalDesignator(
                  NoTernaryExpr(
                    SingleCondFact(
                      TermFiniteExpr(
                        FactorTerm(
                          IntFactor(
                           0
                          ) [IntFactor]
                        ) [FactorTerm]
                        NoOptionalTermList(
                        ) [NoOptionalTermList]
                      ) [TermFiniteExpr]
                    ) [SingleCondFact]
                  ) [NoTernaryExpr]
                ) [YesOptionalDesignator]
              ) [Designator]
              IncrementDesignatorAddition(
              ) [IncrementDesignatorAddition]
            ) [DesignatorStatement]
          ) [DesignatorStatementDecl]
        ) [YesMethodBody]
        ReadStatementDecl(
          ReadStatement(
            Designator(
              DesignatorName(
               x
              ) [DesignatorName]
              NoOptionalDesignator(
              ) [NoOptionalDesignator]
            ) [Designator]
          ) [ReadStatement]
        ) [ReadStatementDecl]
      ) [YesMethodBody]
    ) [MethodDeclaration]
  ) [YesMethodDeclarationList]
) [Program]
INFO  14:26:54,080 - ===================================
INFO  14:26:54,096 - Const variable constInt declared on line 3
INFO  14:26:54,096 - Const variable constChar declared on line 4
INFO  14:26:54,096 - Const variable constBool declared on line 5
ERROR 14:26:54,096 - Semantic Error: Const variable constErrorInt is not compatible with assigning value on line 7
ERROR 14:26:54,096 - Semantic Error: Const variable constErrorChar is not compatible with assigning value on line 8
ERROR 14:26:54,096 - Semantic Error: Const variable constErrorBool is not compatible with assigning value on line 9
ERROR 14:26:54,096 - Semantic Error: Const variable constInt has already been declared on line 11
INFO  14:26:54,096 - Global array x declared on line 13
INFO  14:26:54,096 - Global array y declared on line 13
INFO  14:26:54,096 - Global variable b declared on line 14
INFO  14:26:54,096 - Global variable c declared on line 15
ERROR 14:26:54,096 - Type string not found in Symbol Table on line 17
INFO  14:26:54,096 - Global variable s declared on line 17
INFO  14:26:54,096 - Method main declared on line 20
INFO  14:26:54,096 - Variable b used on line 22
INFO  14:26:54,096 - Variable c used on line 22
ERROR 14:26:54,096 - Semantic Error: Incompatible types where Expr is assigned to Designator on line 22
INFO  14:26:54,096 - Variable c used on line 24
ERROR 14:26:54,096 - Semantic Error: post-increment and post-decrement operators can only be used with int types on line 24
INFO  14:26:54,096 - Element of array x used on line 25
INFO  14:26:54,096 - Array x used on line 27
ERROR 14:26:54,096 - Semantic Error: Operand of read method on line 27 must be of int, bool or char type
ERROR 14:26:54,096 - Parsing finished UNSUCCESSFULLY!
