INFO  20:30:28,797 - Compiling source file: C:\Users\Asus\Desktop\FAKS\PP1\MJCompiler\test\program.mj
INFO  20:30:28,875 - #2 program
INFO  20:30:28,875 - #9 prog
INFO  20:30:28,875 - #5 const
INFO  20:30:28,875 - #9 int
INFO  20:30:28,875 - #9 jedan
INFO  20:30:28,875 - #8 =
INFO  20:30:28,875 - #10 1
INFO  20:30:28,875 - #6 ;
INFO  20:30:28,875 - #5 const
INFO  20:30:28,875 - #9 bool
INFO  20:30:28,875 - #9 tmp
INFO  20:30:28,875 - #8 =
INFO  20:30:28,875 - #11 true
INFO  20:30:28,875 - #6 ;
INFO  20:30:28,875 - #5 const
INFO  20:30:28,875 - #9 char
INFO  20:30:28,875 - #9 hh
INFO  20:30:28,875 - #8 =
INFO  20:30:28,875 - #12 f
INFO  20:30:28,875 - #6 ;
INFO  20:30:28,875 - #9 int
INFO  20:30:28,875 - #9 x
INFO  20:30:28,891 - #6 ;
INFO  20:30:28,891 - #9 int
INFO  20:30:28,891 - #9 y
INFO  20:30:28,891 - #20 [
INFO  20:30:28,891 - #21 ]
INFO  20:30:28,891 - #6 ;
INFO  20:30:28,891 - #9 bool
INFO  20:30:28,891 - #9 array
INFO  20:30:28,891 - #20 [
INFO  20:30:28,891 - #21 ]
INFO  20:30:28,891 - #6 ;
INFO  20:30:28,891 - #9 bool
INFO  20:30:28,891 - #9 a
INFO  20:30:28,891 - #7 ,
INFO  20:30:28,891 - #9 b
INFO  20:30:28,891 - #7 ,
INFO  20:30:28,891 - #9 c
INFO  20:30:28,891 - #7 ,
INFO  20:30:28,891 - #9 d
INFO  20:30:28,891 - #6 ;
INFO  20:30:28,891 - #9 char
INFO  20:30:28,891 - #9 r
INFO  20:30:28,891 - #6 ;
INFO  20:30:28,891 - #3 {
INFO  20:30:28,891 - #15 void
INFO  20:30:28,891 - #9 main
INFO  20:30:28,891 - #13 (
INFO  20:30:28,891 - #14 )
INFO  20:30:28,891 - #9 int
INFO  20:30:28,891 - #9 w
INFO  20:30:28,891 - #6 ;
INFO  20:30:28,891 - #9 bool
INFO  20:30:28,891 - #9 p
INFO  20:30:28,891 - #20 [
INFO  20:30:28,891 - #21 ]
INFO  20:30:28,891 - #6 ;
INFO  20:30:28,891 - #3 {
INFO  20:30:28,891 - #9 y
INFO  20:30:28,891 - #20 [
INFO  20:30:28,891 - #10 0
INFO  20:30:28,891 - #21 ]
INFO  20:30:28,891 - #8 =
INFO  20:30:28,891 - #10 1
INFO  20:30:28,891 - #6 ;
INFO  20:30:28,891 - #9 x
INFO  20:30:28,891 - #22 ++
INFO  20:30:28,906 - #6 ;
INFO  20:30:28,906 - #29 read
INFO  20:30:28,906 - #13 (
INFO  20:30:28,906 - #9 x
INFO  20:30:28,906 - #14 )
INFO  20:30:28,906 - #6 ;
INFO  20:30:28,906 - #30 print
INFO  20:30:28,906 - #13 (
INFO  20:30:28,906 - #9 x
INFO  20:30:28,906 - #14 )
INFO  20:30:28,906 - #6 ;
INFO  20:30:28,906 - #4 }
INFO  20:30:28,906 - #4 }
INFO  20:30:28,922 - Program(
  ProgramName(
   prog
  ) [ProgramName]
  YesDeclarationList(
    YesDeclarationList(
      YesDeclarationList(
        YesDeclarationList(
          YesDeclarationList(
            YesDeclarationList(
              YesDeclarationList(
                YesDeclarationList(
                  NoDeclarationList(
                  ) [NoDeclarationList]
                  ConstantDeclaration(
                    ConstDeclNoError(
                      Type(
                       int
                      ) [Type]
                      SingleConstDeclList(
                        ConstDeclVariable(
                          ConstDeclName(
                           jedan
                          ) [ConstDeclName]
                          ConstDeclValueInt(
                           1
                          ) [ConstDeclValueInt]
                        ) [ConstDeclVariable]
                      ) [SingleConstDeclList]
                    ) [ConstDeclNoError]
                  ) [ConstantDeclaration]
                ) [YesDeclarationList]
                ConstantDeclaration(
                  ConstDeclNoError(
                    Type(
                     bool
                    ) [Type]
                    SingleConstDeclList(
                      ConstDeclVariable(
                        ConstDeclName(
                         tmp
                        ) [ConstDeclName]
                        ConstDeclValueBool(
                         true
                        ) [ConstDeclValueBool]
                      ) [ConstDeclVariable]
                    ) [SingleConstDeclList]
                  ) [ConstDeclNoError]
                ) [ConstantDeclaration]
              ) [YesDeclarationList]
              ConstantDeclaration(
                ConstDeclNoError(
                  Type(
                   char
                  ) [Type]
                  SingleConstDeclList(
                    ConstDeclVariable(
                      ConstDeclName(
                       hh
                      ) [ConstDeclName]
                      ConstDeclValueChar(
                       f
                      ) [ConstDeclValueChar]
                    ) [ConstDeclVariable]
                  ) [SingleConstDeclList]
                ) [ConstDeclNoError]
              ) [ConstantDeclaration]
            ) [YesDeclarationList]
            VariableDeclaration(
              VarDeclNoError(
                Type(
                 int
                ) [Type]
                SingleVarDeclList(
                  DeclVariable(
                    VarDeclName(
                     x
                    ) [VarDeclName]
                    NoVarDeclArrayOption(
                    ) [NoVarDeclArrayOption]
                  ) [DeclVariable]
                ) [SingleVarDeclList]
              ) [VarDeclNoError]
            ) [VariableDeclaration]
          ) [YesDeclarationList]
          VariableDeclaration(
            VarDeclNoError(
              Type(
               int
              ) [Type]
              SingleVarDeclList(
                DeclVariable(
                  VarDeclName(
                   y
                  ) [VarDeclName]
                  YesVarDeclArrayOption(
                  ) [YesVarDeclArrayOption]
                ) [DeclVariable]
              ) [SingleVarDeclList]
            ) [VarDeclNoError]
          ) [VariableDeclaration]
        ) [YesDeclarationList]
        VariableDeclaration(
          VarDeclNoError(
            Type(
             bool
            ) [Type]
            SingleVarDeclList(
              DeclVariable(
                VarDeclName(
                 array
                ) [VarDeclName]
                YesVarDeclArrayOption(
                ) [YesVarDeclArrayOption]
              ) [DeclVariable]
            ) [SingleVarDeclList]
          ) [VarDeclNoError]
        ) [VariableDeclaration]
      ) [YesDeclarationList]
      VariableDeclaration(
        VarDeclNoError(
          Type(
           bool
          ) [Type]
          PluralVarDeclList(
            PluralVarDeclList(
              PluralVarDeclList(
                SingleVarDeclList(
                  DeclVariable(
                    VarDeclName(
                     a
                    ) [VarDeclName]
                    NoVarDeclArrayOption(
                    ) [NoVarDeclArrayOption]
                  ) [DeclVariable]
                ) [SingleVarDeclList]
                DeclVariable(
                  VarDeclName(
                   b
                  ) [VarDeclName]
                  NoVarDeclArrayOption(
                  ) [NoVarDeclArrayOption]
                ) [DeclVariable]
              ) [PluralVarDeclList]
              DeclVariable(
                VarDeclName(
                 c
                ) [VarDeclName]
                NoVarDeclArrayOption(
                ) [NoVarDeclArrayOption]
              ) [DeclVariable]
            ) [PluralVarDeclList]
            DeclVariable(
              VarDeclName(
               d
              ) [VarDeclName]
              NoVarDeclArrayOption(
              ) [NoVarDeclArrayOption]
            ) [DeclVariable]
          ) [PluralVarDeclList]
        ) [VarDeclNoError]
      ) [VariableDeclaration]
    ) [YesDeclarationList]
    VariableDeclaration(
      VarDeclNoError(
        Type(
         char
        ) [Type]
        SingleVarDeclList(
          DeclVariable(
            VarDeclName(
             r
            ) [VarDeclName]
            NoVarDeclArrayOption(
            ) [NoVarDeclArrayOption]
          ) [DeclVariable]
        ) [SingleVarDeclList]
      ) [VarDeclNoError]
    ) [VariableDeclaration]
  ) [YesDeclarationList]
  YesMethodDeclarationList(
    NoMethodDeclarationList(
    ) [NoMethodDeclarationList]
    MethodDeclaration(
      VoidMethodReturnType(
      ) [VoidMethodReturnType]
      MethodName(
       main
      ) [MethodName]
      NoMethodParameters(
      ) [NoMethodParameters]
      YesMethodVariables(
        YesMethodVariables(
          NoMethodVariables(
          ) [NoMethodVariables]
          VarDeclNoError(
            Type(
             int
            ) [Type]
            SingleVarDeclList(
              DeclVariable(
                VarDeclName(
                 w
                ) [VarDeclName]
                NoVarDeclArrayOption(
                ) [NoVarDeclArrayOption]
              ) [DeclVariable]
            ) [SingleVarDeclList]
          ) [VarDeclNoError]
        ) [YesMethodVariables]
        VarDeclNoError(
          Type(
           bool
          ) [Type]
          SingleVarDeclList(
            DeclVariable(
              VarDeclName(
               p
              ) [VarDeclName]
              YesVarDeclArrayOption(
              ) [YesVarDeclArrayOption]
            ) [DeclVariable]
          ) [SingleVarDeclList]
        ) [VarDeclNoError]
      ) [YesMethodVariables]
      YesMethodBody(
        YesMethodBody(
          YesMethodBody(
            YesMethodBody(
              NoMethodBody(
              ) [NoMethodBody]
              DesignatorStatementDecl(
                DesignatorStatement(
                  Designator(
                    DesignatorName(
                     y
                    ) [DesignatorName]
                    YesOptionalDesignator(
                      NoTernaryExpr(
                        SingleCondFact(
                          TermFiniteExpr(
                            FactorTerm(
                              IntFactor(
                               0
                              ) [IntFactor]
                            ) [FactorTerm]
                            NoOptionalTermList(
                            ) [NoOptionalTermList]
                          ) [TermFiniteExpr]
                        ) [SingleCondFact]
                      ) [NoTernaryExpr]
                    ) [YesOptionalDesignator]
                  ) [Designator]
                  PossibleErrorAssignOpDesignatorAddition(
                    AssignOpExprDesignatorAdditionNoError(
                      Assignop(
                      ) [Assignop]
                      NoTernaryExpr(
                        SingleCondFact(
                          TermFiniteExpr(
                            FactorTerm(
                              IntFactor(
                               1
                              ) [IntFactor]
                            ) [FactorTerm]
                            NoOptionalTermList(
                            ) [NoOptionalTermList]
                          ) [TermFiniteExpr]
                        ) [SingleCondFact]
                      ) [NoTernaryExpr]
                    ) [AssignOpExprDesignatorAdditionNoError]
                  ) [PossibleErrorAssignOpDesignatorAddition]
                ) [DesignatorStatement]
              ) [DesignatorStatementDecl]
            ) [YesMethodBody]
            DesignatorStatementDecl(
              DesignatorStatement(
                Designator(
                  DesignatorName(
                   x
                  ) [DesignatorName]
                  NoOptionalDesignator(
                  ) [NoOptionalDesignator]
                ) [Designator]
                IncrementDesignatorAddition(
                ) [IncrementDesignatorAddition]
              ) [DesignatorStatement]
            ) [DesignatorStatementDecl]
          ) [YesMethodBody]
          ReadStatementDecl(
            ReadStatement(
              Designator(
                DesignatorName(
                 x
                ) [DesignatorName]
                NoOptionalDesignator(
                ) [NoOptionalDesignator]
              ) [Designator]
            ) [ReadStatement]
          ) [ReadStatementDecl]
        ) [YesMethodBody]
        PrintStatementDecl(
          PrintStatement(
            NoTernaryExpr(
              SingleCondFact(
                TermFiniteExpr(
                  FactorTerm(
                    DesignatorFactor(
                      Designator(
                        DesignatorName(
                         x
                        ) [DesignatorName]
                        NoOptionalDesignator(
                        ) [NoOptionalDesignator]
                      ) [Designator]
                    ) [DesignatorFactor]
                  ) [FactorTerm]
                  NoOptionalTermList(
                  ) [NoOptionalTermList]
                ) [TermFiniteExpr]
              ) [SingleCondFact]
            ) [NoTernaryExpr]
            OptionalNoPrintNumber(
            ) [OptionalNoPrintNumber]
          ) [PrintStatement]
        ) [PrintStatementDecl]
      ) [YesMethodBody]
    ) [MethodDeclaration]
  ) [YesMethodDeclarationList]
) [Program]
INFO  20:30:28,922 - ===================================
INFO  20:30:28,922 - Const variable jedan declared on line 3
INFO  20:30:28,922 - Const variable tmp declared on line 4
INFO  20:30:28,922 - Const variable hh declared on line 5
INFO  20:30:28,922 - Global variable x declared on line 7
INFO  20:30:28,922 - Global array y declared on line 8
INFO  20:30:28,922 - Global array array declared on line 9
INFO  20:30:28,922 - Global variable a declared on line 10
INFO  20:30:28,922 - Global variable b declared on line 10
INFO  20:30:28,922 - Global variable c declared on line 10
INFO  20:30:28,922 - Global variable d declared on line 10
INFO  20:30:28,922 - Global variable r declared on line 11
INFO  20:30:28,922 - Method main declared on line 13
INFO  20:30:28,922 - Local variable w declared on line 13
INFO  20:30:28,922 - Local array p declared on line 13
INFO  20:30:28,922 - Element of array y used on line 15
INFO  20:30:28,922 - Variable x used on line 16
INFO  20:30:28,922 - Variable x used on line 17
INFO  20:30:28,922 - Variable x used on line 18
ERROR 20:30:28,922 - Semantic Error: Operand of print method on line 18 must be of int, bool or char type
ERROR 20:30:28,922 - Parsing finished UNSUCCESSFULLY!
