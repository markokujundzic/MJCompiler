INFO  15:11:39,167 - ====================LEXICAL ANALYSIS========================
INFO  15:11:39,243 - #2 program
INFO  15:11:39,244 - #9 prog
INFO  15:11:39,244 - #5 const
INFO  15:11:39,245 - #9 int
INFO  15:11:39,245 - #9 konstanta
INFO  15:11:39,246 - #8 =
INFO  15:11:39,247 - #10 5
INFO  15:11:39,247 - #6 ;
INFO  15:11:39,248 - #3 {
INFO  15:11:39,248 - #15 void
INFO  15:11:39,249 - #9 main
INFO  15:11:39,249 - #13 (
INFO  15:11:39,250 - #14 )
INFO  15:11:39,251 - #9 int
INFO  15:11:39,252 - #9 x
INFO  15:11:39,252 - #6 ;
INFO  15:11:39,255 - #9 int
INFO  15:11:39,255 - #9 y
INFO  15:11:39,256 - #6 ;
INFO  15:11:39,256 - #9 int
INFO  15:11:39,256 - #9 z
INFO  15:11:39,256 - #6 ;
INFO  15:11:39,256 - #3 {
INFO  15:11:39,262 - #9 x
INFO  15:11:39,263 - #8 =
INFO  15:11:39,265 - #34 -
INFO  15:11:39,266 - #10 5
INFO  15:11:39,266 - #37 *
INFO  15:11:39,266 - #10 3
INFO  15:11:39,267 - #36 +
INFO  15:11:39,268 - #10 2
INFO  15:11:39,269 - #6 ;
INFO  15:11:39,270 - #30 print
INFO  15:11:39,270 - #13 (
INFO  15:11:39,271 - #9 x
INFO  15:11:39,271 - #14 )
INFO  15:11:39,271 - #6 ;
INFO  15:11:39,271 - #9 y
INFO  15:11:39,272 - #8 =
INFO  15:11:39,272 - #10 8
INFO  15:11:39,272 - #34 -
INFO  15:11:39,273 - #10 2
INFO  15:11:39,273 - #37 *
INFO  15:11:39,273 - #10 3
INFO  15:11:39,274 - #6 ;
INFO  15:11:39,274 - #30 print
INFO  15:11:39,276 - #13 (
INFO  15:11:39,276 - #9 y
INFO  15:11:39,276 - #14 )
INFO  15:11:39,276 - #6 ;
INFO  15:11:39,276 - #4 }
INFO  15:11:39,277 - #4 }
INFO  15:11:39,287 - =======================SYNTAX TREE===========================
INFO  15:11:39,288 - Program(
  ProgramName(
   prog
  ) [ProgramName]
  YesDeclarationList(
    NoDeclarationList(
    ) [NoDeclarationList]
    ConstantDeclaration(
      ConstDeclNoError(
        Type(
         int
        ) [Type]
        SingleConstDeclList(
          ConstDeclVariable(
            ConstDeclName(
             konstanta
            ) [ConstDeclName]
            ConstDeclValueInt(
             5
            ) [ConstDeclValueInt]
          ) [ConstDeclVariable]
        ) [SingleConstDeclList]
      ) [ConstDeclNoError]
    ) [ConstantDeclaration]
  ) [YesDeclarationList]
  YesMethodDeclarationList(
    NoMethodDeclarationList(
    ) [NoMethodDeclarationList]
    MethodDeclaration(
      VoidMethodReturnType(
      ) [VoidMethodReturnType]
      MethodName(
       main
      ) [MethodName]
      NoMethodParameters(
      ) [NoMethodParameters]
      YesMethodVariables(
        YesMethodVariables(
          YesMethodVariables(
            NoMethodVariables(
            ) [NoMethodVariables]
            VarDeclNoError(
              Type(
               int
              ) [Type]
              SingleVarDeclList(
                DeclVariable(
                  VarDeclName(
                   x
                  ) [VarDeclName]
                  NoVarDeclArrayOption(
                  ) [NoVarDeclArrayOption]
                ) [DeclVariable]
              ) [SingleVarDeclList]
            ) [VarDeclNoError]
          ) [YesMethodVariables]
          VarDeclNoError(
            Type(
             int
            ) [Type]
            SingleVarDeclList(
              DeclVariable(
                VarDeclName(
                 y
                ) [VarDeclName]
                NoVarDeclArrayOption(
                ) [NoVarDeclArrayOption]
              ) [DeclVariable]
            ) [SingleVarDeclList]
          ) [VarDeclNoError]
        ) [YesMethodVariables]
        VarDeclNoError(
          Type(
           int
          ) [Type]
          SingleVarDeclList(
            DeclVariable(
              VarDeclName(
               z
              ) [VarDeclName]
              NoVarDeclArrayOption(
              ) [NoVarDeclArrayOption]
            ) [DeclVariable]
          ) [SingleVarDeclList]
        ) [VarDeclNoError]
      ) [YesMethodVariables]
      YesMethodBody(
        YesMethodBody(
          YesMethodBody(
            YesMethodBody(
              NoMethodBody(
              ) [NoMethodBody]
              DesignatorStatementDecl(
                DesignatorStatement(
                  Designator(
                    DesignatorName(
                     x
                    ) [DesignatorName]
                    NoOptionalDesignator(
                    ) [NoOptionalDesignator]
                  ) [Designator]
                  PossibleErrorAssignOpDesignatorAddition(
                    AssignOpExprDesignatorAdditionNoError(
                      Assignop(
                      ) [Assignop]
                      NoTernaryExpr(
                        SingleCondFact(
                          MinusTermFiniteExpr(
                            MulopTerm(
                              FactorTerm(
                                IntFactor(
                                 5
                                ) [IntFactor]
                              ) [FactorTerm]
                              MulopMul(
                              ) [MulopMul]
                              IntFactor(
                               3
                              ) [IntFactor]
                            ) [MulopTerm]
                            YesOptionalTermList(
                              NoOptionalTermList(
                              ) [NoOptionalTermList]
                              AddopPlus(
                              ) [AddopPlus]
                              FactorTerm(
                                IntFactor(
                                 2
                                ) [IntFactor]
                              ) [FactorTerm]
                            ) [YesOptionalTermList]
                          ) [MinusTermFiniteExpr]
                        ) [SingleCondFact]
                      ) [NoTernaryExpr]
                    ) [AssignOpExprDesignatorAdditionNoError]
                  ) [PossibleErrorAssignOpDesignatorAddition]
                ) [DesignatorStatement]
              ) [DesignatorStatementDecl]
            ) [YesMethodBody]
            PrintStatementDecl(
              PrintStatement(
                NoTernaryExpr(
                  SingleCondFact(
                    TermFiniteExpr(
                      FactorTerm(
                        DesignatorFactor(
                          Designator(
                            DesignatorName(
                             x
                            ) [DesignatorName]
                            NoOptionalDesignator(
                            ) [NoOptionalDesignator]
                          ) [Designator]
                        ) [DesignatorFactor]
                      ) [FactorTerm]
                      NoOptionalTermList(
                      ) [NoOptionalTermList]
                    ) [TermFiniteExpr]
                  ) [SingleCondFact]
                ) [NoTernaryExpr]
                OptionalNoPrintNumber(
                ) [OptionalNoPrintNumber]
              ) [PrintStatement]
            ) [PrintStatementDecl]
          ) [YesMethodBody]
          DesignatorStatementDecl(
            DesignatorStatement(
              Designator(
                DesignatorName(
                 y
                ) [DesignatorName]
                NoOptionalDesignator(
                ) [NoOptionalDesignator]
              ) [Designator]
              PossibleErrorAssignOpDesignatorAddition(
                AssignOpExprDesignatorAdditionNoError(
                  Assignop(
                  ) [Assignop]
                  NoTernaryExpr(
                    SingleCondFact(
                      TermFiniteExpr(
                        FactorTerm(
                          IntFactor(
                           8
                          ) [IntFactor]
                        ) [FactorTerm]
                        YesOptionalTermList(
                          NoOptionalTermList(
                          ) [NoOptionalTermList]
                          AddopMinus(
                          ) [AddopMinus]
                          MulopTerm(
                            FactorTerm(
                              IntFactor(
                               2
                              ) [IntFactor]
                            ) [FactorTerm]
                            MulopMul(
                            ) [MulopMul]
                            IntFactor(
                             3
                            ) [IntFactor]
                          ) [MulopTerm]
                        ) [YesOptionalTermList]
                      ) [TermFiniteExpr]
                    ) [SingleCondFact]
                  ) [NoTernaryExpr]
                ) [AssignOpExprDesignatorAdditionNoError]
              ) [PossibleErrorAssignOpDesignatorAddition]
            ) [DesignatorStatement]
          ) [DesignatorStatementDecl]
        ) [YesMethodBody]
        PrintStatementDecl(
          PrintStatement(
            NoTernaryExpr(
              SingleCondFact(
                TermFiniteExpr(
                  FactorTerm(
                    DesignatorFactor(
                      Designator(
                        DesignatorName(
                         y
                        ) [DesignatorName]
                        NoOptionalDesignator(
                        ) [NoOptionalDesignator]
                      ) [Designator]
                    ) [DesignatorFactor]
                  ) [FactorTerm]
                  NoOptionalTermList(
                  ) [NoOptionalTermList]
                ) [TermFiniteExpr]
              ) [SingleCondFact]
            ) [NoTernaryExpr]
            OptionalNoPrintNumber(
            ) [OptionalNoPrintNumber]
          ) [PrintStatement]
        ) [PrintStatementDecl]
      ) [YesMethodBody]
    ) [MethodDeclaration]
  ) [YesMethodDeclarationList]
) [Program]
INFO  15:11:39,289 - ======================SEMANTIC ANALYSIS======================
INFO  15:11:39,292 - Const variable konstanta declared on line 3
INFO  15:11:39,292 - Method main declared on line 6
INFO  15:11:39,293 - Local variable x declared on line 6
INFO  15:11:39,293 - Local variable y declared on line 6
INFO  15:11:39,293 - Local variable z declared on line 6
INFO  15:11:39,293 - Variable x used: Var x: int, 0, 1  on line 8
INFO  15:11:39,294 - Variable x used: Var x: int, 0, 1  on line 9
INFO  15:11:39,295 - Variable y used: Var y: int, 1, 1  on line 11
INFO  15:11:39,295 - Variable y used: Var y: int, 1, 1  on line 12
INFO  15:11:39,295 - =======================SYNTAX ANALYSIS=======================
INFO  15:11:39,295 - 1 methods in the program
INFO  15:11:39,295 - 1 constants declared
INFO  15:11:39,295 - 0 global variables declared
INFO  15:11:39,295 - 0 global arrays declared
INFO  15:11:39,295 - 3 local variables declared
INFO  15:11:39,295 - 0 local arrays declared
INFO  15:11:39,295 - 4 statements in main
INFO  15:11:39,296 - ================SEMANTIC ANALYSIS SUCCESSFUL=================
INFO  15:11:39,301 - ==============COMPILATION FINISHED SUCCESSFULLY==============
